name: Publish Javadoc Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Generate Javadoc
        run: |
          echo "Generating standard Javadoc..."
          ./gradlew javadoc --stacktrace --console=plain
          
          echo "Also trying Dokka for Java..."
          ./gradlew dokkaJavadoc --stacktrace --console=plain || true
          ./gradlew dokkaGeneratePublicationJavadoc --stacktrace --console=plain || true

      - name: Find and prepare documentation
        run: |
          echo "Searching for generated documentation..."
          
          # Standard Javadoc locations
          POSSIBLE_LOCATIONS=(
            "build/docs/javadoc"
            "build/javadoc"
            "build/dokka/javadoc"
          )
          
          DOCS_FOUND=false
          mkdir -p docs
          
          for location in "${POSSIBLE_LOCATIONS[@]}"; do
            if [ -d "$location" ]; then
              echo "Checking location: $location"
              ls -la "$location" || true
          
              # Check if there are actual HTML files
              HTML_COUNT=$(find "$location" -name "*.html" -type f | wc -l)
          
              if [ "$HTML_COUNT" -gt 0 ]; then
                echo "Found $HTML_COUNT HTML files in: $location"
                cp -r "$location"/* docs/
                DOCS_FOUND=true
                break
              else
                echo "No HTML files found in: $location"
              fi
            fi
          done
          
          if [ "$DOCS_FOUND" = false ]; then
            echo "No documentation found, creating placeholder..."
            cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>OctoFault Documentation</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
              .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              .warning { color: #856404; background: #fff3cd; padding: 20px; border-radius: 4px; margin: 20px 0; border: 1px solid #ffeaa7; }
              .info { color: #0c5460; background: #d1ecf1; padding: 20px; border-radius: 4px; margin: 20px 0; border: 1px solid #bee5eb; }
              pre { background: #f8f9fa; padding: 15px; overflow-x: auto; border-radius: 4px; border: 1px solid #e9ecef; }
              h1 { color: #495057; margin-top: 0; }
              code { background: #f8f9fa; padding: 2px 4px; border-radius: 3px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>OctoFault Documentation</h1>
              <div class="warning">
                <h3>‚ö†Ô∏è Documentation Not Generated</h3>
                <p>Javadoc was unable to generate documentation. This usually means:</p>
                <ul>
                  <li>No public classes or methods found to document</li>
                  <li>Missing Javadoc comments on public APIs</li>
                  <li>Source files not found in expected location</li>
                </ul>
              </div>
              <div class="info">
                <h3>üìã To fix this:</h3>
                <ol>
                  <li>Add Javadoc comments to your public classes and methods in <code>src/main/java/com/ikknight/octofault/</code></li>
                  <li>Ensure your library has public APIs to document</li>
                  <li>Check that your Java files are in the correct directory structure</li>
                  <li>Review the GitHub Actions logs for specific errors</li>
                </ol>
                <p><strong>Example Javadoc comment:</strong></p>
                <pre>/**
           * This class provides fault detection for FTC robots.
           * 
           * @author IKKNIGHT
           * @since 1.0
           */
          public class OctoFault {
              /**
               * Initializes the fault detection system.
               * 
               * @param config the configuration to use
               * @return true if successful, false otherwise
               */
              public boolean initialize(FaultConfig config) {
                  // implementation
              }
          }</pre>
              </div>
              <p><strong>Repository:</strong> <a href="https://github.com/IKKNIGHT/Octofault">IKKNIGHT/Octofault</a></p>
              <p><strong>Library:</strong> OctoFault - FTC Fault Detection Library</p>
            </div>
          </body>
          </html>
          EOF
          fi
          
          # Disable Jekyll processing
          touch docs/.nojekyll
          
          echo "Final documentation structure:"
          ls -la docs/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4